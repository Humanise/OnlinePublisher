@mixin when($size:any) {
  @if ($size!=any) {
    @media screen and (min-width: $size) {
      @content;
    }
  }
  @else {
    @content;
  }
}

@mixin if($params:()) {
  @if ($target=='msie_lt9' and map-has-key($params, width)) {
    @content;
  }
  @elseif (map-has-key($params, target)) {
    @if (map-get($params,'target')==$target or $target==editor) {
      @if (map-has-key($params, width)) {
        @media screen and (min-width: #{map-get($params,'width')}) {
          @content;
        }
      }
      @else {
        @content;
      }
    }
  }
  @elseif ($target=='async' or $target=='editor') {
    @if (map-has-key($params, width)) {
      @media screen and (min-width: #{map-get($params,'width')}) {
        @content;
      }
    }
    @else {
      @content;
    }
  }
}

// TODO use "if"
@mixin retina {
  @media  (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
    @content;
  }
}

@mixin transition($value) {
	-webkit-transition: $value;
	-moz-transition: $value;
	-ms-transition: $value;
	transition: $value;
}

@mixin transform($value) {
	-webkit-transform: $value;
	-moz-transform: $value;
	-ms-transform: $value;
	transform: $value;
}

@mixin border-box {
	box-sizing: border-box;
	-moz-box-sizing: border-box;
}

@mixin no-appearance {
  -webkit-appearance: none;
}

@mixin vertical-gradient($start-colour, $end-colour) {
    background-color: $start-colour;
    background-image: -webkit-gradient(linear, left top, left bottom, from($start-colour), to($end-colour));
    background-image: -webkit-linear-gradient(top, $start-colour, $end-colour);
    background-image:    -moz-linear-gradient(top, $start-colour, $end-colour);
    background-image:     -ms-linear-gradient(top, $start-colour, $end-colour);
    background-image:      -o-linear-gradient(top, $start-colour, $end-colour);
    background-image:         linear-gradient(top, $start-colour, $end-colour);
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$start-colour}', endColorstr='#{$end-colour}');
}